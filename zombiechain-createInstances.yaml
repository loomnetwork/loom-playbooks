---
- name: Create instance(s)
  hosts: localhost
  connection: local
  gather_facts: no

  vars:

  tasks:
  - name: AWS key pair
    local_action:
      module: ec2_key
      name: "{{ resource_prefix }}_key-{{ item.key }}"
      region: "{{ item.key }}"
    with_dict: "{{ aws_regions }}"
    when: groups['amazon_ec2'] is defined
    register: aws_keypairs

  - name: Save key pairs locally
    local_action:
      module: copy
      content: "{{ item.key.private_key }}"
      dest: "~/.ssh/{{ resource_prefix }}_key-{{ item.item.key }}.pem"
      mode: 0600
    with_items: "{{ aws_keypairs.results }}"
    when: aws_keypairs.changed

  - name: AWS security groups in each region
    local_action:
      module: ec2_group
      name: "{{ resource_prefix }}_sg-{{ item.key }}"
      description: Security group for zombiechain instances
      vpc_id: "{{ item.value.vpc }}"
      region: "{{ item.key }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: icmp
          from_port: 8
          to_port:  -1
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 9100
          to_port: 9100
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          ports:
            - 46656-46658
            - 9999
          cidr_ip:
            - "{{ item.value.vpc_cidr }}"
            - "0.0.0.0/0"
    with_dict: "{{ aws_regions }}"
    when: groups['amazon_ec2'] is defined

  - name: Launch instances on AWS EC2
    local_action:
      module: ec2
      id: "{{ hostvars[item]['ansible_hostname'] }}"
      key_name: "{{ resource_prefix }}_key-{{ hostvars[item]['region'] }}"
      group: "{{ resource_prefix }}_sg-{{ hostvars[item]['region'] }}"
      instance_type: "{{ hostvars[item]['instance_type'] }}"
      image: "{{ aws_regions[hostvars[item]['region']]['ami'] }}"
      wait: yes
      wait_timeout: 500
      instance_profile_name: "{{ resource_prefix }}"
      instance_tags:
          Name: "{{ hostvars[item]['ansible_hostname'] }}"
      region: "{{ hostvars[item]['region'] }}"
      vpc_subnet_id: "{{ hostvars[item]['subnet'] }}"
      assign_public_ip: yes
      monitoring: yes
      user_data: "{{ hostvars[item]['user_data'] }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: io1
          volume_size: "{{ disk_size }}"
          iops: 1000
          delete_on_termination: false
          name: "ssdisk-{{ hostvars[item]['ansible_hostname'] }}"
      state: present
    register: ec2_results
    with_items: "{{ groups['amazon_ec2'] }}"
    when: groups['amazon_ec2'] is defined

  - name: Initialize list to save IP addresses
    set_fact:
      ec2_public_ips: []

  # - debug:
  #     var: ec2_results.results

  - name: Collect AWS IP addresses
    set_fact:
      ec2_public_ips: "{{ ec2_public_ips }} + [ '{{ item.instances[0].public_ip }}/32' ]"
    with_items:
    - "{{ ec2_results.results }}"
    when: groups['amazon_ec2'] is defined

  - name: Append to AWS security groups
    local_action:
      module: ec2_group
      name: "{{ resource_prefix }}_sg-{{ item.key }}"
      description: Security group for zombiechain instances
      vpc_id: "{{ item.value.vpc }}"
      region: "{{ item.key }}"
      purge_rules: no
      rules:
        - proto: tcp
          ports:
            - 46656-46658
            - 9999
          cidr_ip: "{{ gce_public_ips }} + {{ ec2_public_ips }}"
    with_dict: "{{ aws_regions }}"
    when: groups['amazon_ec2'] is defined
